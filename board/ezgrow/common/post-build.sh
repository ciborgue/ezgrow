#!/bin/sh
#set -x
set -u
set -e

. ${BASE_DIR}/project_locations # generated by make-buildroot.rb

# Add a console on tty1
if [ -e ${TARGET_DIR}/etc/inittab ]; then
    grep -qE '^tty1::' ${TARGET_DIR}/etc/inittab || \
	sed -i '/GENERIC_SERIAL/a\
tty1::respawn:/sbin/getty -L  tty1 0 vt100 # HDMI console' ${TARGET_DIR}/etc/inittab
fi

############### Below are the GrowBox additions (above lines are from raspberrypi)
makeLink() {
  # $1 is the target, $2 is the link name; ie. /var/lib/tor /tmp/tor
  rm -f ${TARGET_DIR}/$2 ; ln -s $1 ${TARGET_DIR}/$2
}

############### Get a fresh copy of the users & permissions tables
cp ${PROJECT_EZ_PATH}/board/ezgrow/common/user_table.text ${BASE_DIR}
PERMISSIONS=${BASE_DIR}/device_table.txt
cp ${PROJECT_BR2_PATH}/system/device_table.txt ${PERMISSIONS}
cat <<EOF >> ${PERMISSIONS}
/etc/crontabs                           d 700 root wheel - - - - -
/etc/crontabs/root                      f 600 root wheel - - - - -
/etc/crontabs/ganja                     f 600 ganja ganja - - - - -
/etc/ssh                                d 755 root wheel - - - - -
/etc/ssh/sshd_config                    f 600 root wheel - - - - -
/etc/ssh/ssh_config                     f 644 root wheel - - - - -
/root/.ssh                              d 700 root root - - - - -
/etc/wpa_supplicant                     d 755 root root - - - - -
/etc/wpa_supplicant/wpa_supplicant.conf f 600 root root - - - - -
/home									d 755 root root - - - - -
/home/ganja								d 755 ganja ganja - - - - -
/home/ganja/bin							d 755 ganja ganja - - - - -
/home/ganja/bin/switched-pdu			f 755 ganja ganja - - - - -
EOF

############### Copy default 'inetd.conf' to /etc
# UPD: don't copy, I need a customized config; keep the permissions line though
#cp ${BUILD_DIR}/busybox-*/examples/inetd.conf \
#	${TARGET_DIR}/etc
cat <<EOF >> ${PERMISSIONS}
/etc/inetd.conf                         f 600 root wheel - - - - -
EOF

############### generate urandom seed using HOST /dev/urandom
# Note that it is only used for the first reboot
# Later on /storage/system/random-seed will be generated and updated every
# now and then. See the updated urandom startup script for the details
dd if=/dev/urandom of=${TARGET_DIR}/etc/random-seed count=1 > /dev/null 2>&1
echo "/etc/random-seed f 640 root wheel - - - - -" >> ${PERMISSIONS}

############### create fresh set of sshd host keys using HOST ssh-keygen
for keyType in dsa ecdsa ed25519 rsa; do
  keyFile=${TARGET_DIR}/etc/ssh/ssh_host_${keyType}_key
  rm -f ${keyFile} ${keyFile}.pub
  ssh-keygen -q -C "${PROJECT_NAME} SSH Host Key: type ${keyType}" \
    -t ${keyType} -o -h -P '' -f ${keyFile}
  cat <<EOF >> ${PERMISSIONS}
/etc/ssh/ssh_host_${keyType}_key        f 600 root ssh-keys - - - - -
/etc/ssh/ssh_host_${keyType}_key.pub    f 644 root ssh-keys - - - - -
EOF
done

############### Generate root user ssh keys; set the passphrase
ROOTPW=$(grep '^BR2_TARGET_GENERIC_ROOT_PASSWD' ${BASE_DIR}/.config | \
  sed -e 's/.*="//;s/"$//')
rm -rf ${TARGET_DIR}/root/.ssh ; mkdir ${TARGET_DIR}/root/.ssh
ssh-keygen -q -C "${PROJECT_NAME} SSH Root User Key: rsa" \
  -t rsa -o -P ${ROOTPW} -f ${TARGET_DIR}/root/.ssh/id_rsa
rm -f ${TARGET_DIR}/root/.ssh/authorized_keys ; \
  ln ${TARGET_DIR}/root/.ssh/id_rsa.pub ${TARGET_DIR}/root/.ssh/authorized_keys
cat <<EOF >> ${PERMISSIONS}
/root/.ssh/id_rsa     f 600 root root - - - - -
/root/.ssh/id_rsa.pub f 644 root root - - - - -
EOF

############### Copy saved HOST SSH keys if any
if [[ -f ~/${PROJECT_NAME}-site/ssh-host-keys.tar.xz ]]; then
  echo "Found HOST SSH keys. Using stored keys."
  xz -cd ~/${PROJECT_NAME}-site/ssh-host-keys.tar.xz | \
	  tar xCf ${TARGET_DIR}/etc/ssh -
fi

############### Copy saved USER SSH keys if any
if [[ -f ~/${PROJECT_NAME}-site/ssh-user-keys.tar.xz ]]; then
  echo "Found USER SSH keys. Using stored keys."
  xz -cd ~/${PROJECT_NAME}-site/ssh-user-keys.tar.xz | \
	  tar xCf ${TARGET_DIR}/root/.ssh -
fi

############### tor: remove package sample config, if any
rm -f ${TARGET_DIR}/etc/tor/torrc.sample
rm -rf ${TARGET_DIR}/var/lib/tor; makeLink /tmp/tor /var/lib/tor
cat <<EOF >> ${PERMISSIONS}
/etc/tor       d 755 tor-anon tor-anon - - - - -
/etc/tor/torrc f 640 tor-anon tor-anon - - - - -
EOF

# fstab: add /site & /boot, change root fs to squashfs (and RO)
cp ${PROJECT_BR2_PATH}/system/skeleton/etc/fstab ${TARGET_DIR}/etc/fstab
ed -s ${TARGET_DIR}/etc/fstab <<EOF
/\/dev\/root/c
/dev/root      /     squashfs defaults,ro                      0 0
/dev/mmcblk0p1 /boot vfat     defaults,ro                      0 0
/dev/mmcblk0p5 /site ext4     defaults,ro,nosuid,nodev,noatime 0 0
.
w
EOF

# RPi config; this is going to be picked up by mkfs.vfat
#	copy custom overlay; this can't be done by OVERLAY_* (or can it?)
cp ${PROJECT_EZ_PATH}/dts/i2c-pull-down.dtbo \
		 ${BINARIES_DIR}/rpi-firmware/overlays

cp ${PROJECT_BR2_PATH}/package/rpi-firmware/config.txt \
		 ${BINARIES_DIR}/rpi-firmware
ed -s ${BINARIES_DIR}/rpi-firmware/config.txt <<EOF
/^gpu_mem/,\$c
gpu_mem=32
hdmi_safe=1

dtparam=spi=on
dtparam=i2c_arm=on
dtparam=i2c_arm_baudrate=250000
# Make sure that I2C pull down resistors are activated; without them
# ADS1115 powered by 5v and BME280 powered by 3.3v won't work properly
# on the same I2C bus. I really don't understand why; somebody please
# explain it to me. They work just fine if ADS is powered by 3.3v.
dtoverlay=i2c-pull-down
.
w
EOF

cp ${PROJECT_BR2_PATH}/package/rpi-firmware/cmdline.txt \
		 ${BINARIES_DIR}/rpi-firmware
ed -s ${BINARIES_DIR}/rpi-firmware/cmdline.txt <<EOF
.s/\(.*\)/\1 elevator=noop ${PROJECT_EZ_NO_LOGO}/
.s/[[:space:]]*\$//
w
EOF

# these links can't be created in runtime as the squash file system is RO
makeLink ../../tmp /var/lib/iptraf-ng
makeLink ../../tmp /var/lib/snmp
makeLink ../../tmp/.ash_history /root/.ash_history

############### lirc: remove default devinput config and Python libs
rm -rf ${TARGET_DIR}/etc/lirc/lircd.conf.d/devinput.lircd.conf \
	${TARGET_DIR}/usr/lib/python* ${TARGET_DIR}/usr/bin/lirc-setup

cloneGit() {
	if [[ ! -f $2 ]]; then
		TMPPATH=/tmp/git-path.$$
		git clone $1 $TMPPATH
		( cd $TMPPATH; git archive --format tar HEAD | xz -9c > $2 )
		rm -rf $TMPPATH
	fi
}

FIRMWARE_URL="https://github.com/RPi-Distro/firmware-nonfree.git"
FIRMWARE_FILE="${BR2_DL_DIR}/firmware-nonfree.tar.xz"
cloneGit $FIRMWARE_URL $FIRMWARE_FILE

############### Broadcom 4343 firmware: can't legally have it with my project
tar --extract --xz --strip-components=1 \
	--directory=${TARGET_DIR}/lib/firmware \
	--file=${FIRMWARE_FILE} \
	brcm80211/brcm

############### Realtek 8192 firmware: can't legally have it with my project
# TODO: check if CONFIG_RTL_CARDS is set (=y or =m); firmware is not needed
#	with a free ('new') driver
#tar --extract --xz --strip-components=1 \
#	--directory=${TARGET_DIR}/lib/firmware \
#	--file=${FIRMWARE_FILE} \
#	realtek/rtlwifi

# can't make it a package as it augments another package (Ruby)
DEEPMERGE_URL="https://github.com/danielsdeleo/deep_merge.git"
DEEPMERGE_FILE="${BR2_DL_DIR}/deep_merge.tar.xz"
cloneGit $DEEPMERGE_URL $DEEPMERGE_FILE
tar --extract --xz --strip-components=1 \
	--directory=$(echo ${TARGET_DIR}/usr/lib/ruby/[0-9].*) \
	--file=${DEEPMERGE_FILE} \
	lib

############### remove build leftovers
rm -f ${TARGET_DIR}/etc/init.d/{S10udev,S20urandom,S49ntp,S04cron}

############### Build '/site' filesystem
dd if=/dev/zero of=${BINARIES_DIR}/site.ext4 \
	bs=$((1024 * 1024)) count=$PROJECT_EZ_SITE_SIZE
mkfs.ext4 -m 0 -L "SITE" -e remount-ro -E root_owner=0:0 \
	${BINARIES_DIR}/site.ext4
if [[ -d ~/ezgrow-site/site ]]; then
	MPOINT="/tmp/site.$$"
	mkdir $MPOINT
	sudo mount -o loop ${BINARIES_DIR}/site.ext4 $MPOINT
	tar --owner root --group root --directory ~/ezgrow-site/site -cf - . | \
		sudo tar --directory $MPOINT -xf -
	sudo umount $MPOINT
	rmdir $MPOINT
fi
